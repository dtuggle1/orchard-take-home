import numpy as np
import cv2

def get_depth_filename_from_image_filename(image_filename):
  return f"{image_filename[:3]}_depth.png"

def get_label_filename_from_training_image_filename(image_filename):
    return f"{image_filename[:3]}.txt"

def convert_label_contour(label_line, img_shape):
    parts = label_line.strip().split()
    class_label = int(parts[0])
    if class_label != 0:
        return None
    coordinates = [(float(parts[i]) * img_shape[1], float(parts[i + 1]) * img_shape[0]) for i in range(1, len(parts), 2)]
    return np.int32([coordinates])

def overlay_label(label_file_path, image, transparency_level):
    with open(label_file_path, 'r') as file:
        for line in file:
            contour = convert_label_contour(line, image.shape)
            if contour is not None:
                cv2.fillPoly(image, [contour], (0, 0, 255))

    masked_image = cv2.addWeighted(image, transparency_level, image,
                                   1 - transparency_level,
                                   0)  # Asked CHATGPT how to create translucent

    return masked_image


# GENERATED BY AI TO SIMPLIFY THE LABELS


def simplify_polygon(coords, epsilon_factor=0.01):
    """Simplify polygon using Douglas-Peucker algorithm"""
    if len(coords) < 6:  # Need at least 3 points (6 coordinates)
        return coords

    # Convert to numpy array and reshape to coordinate pairs
    coords_array = np.array(coords, dtype=np.float32)

    # Reshape to (n_points, 2) format
    points = coords_array.reshape(-1, 2)

    # Convert to OpenCV format (n_points, 1, 2)
    cv_points = points.reshape(-1, 1, 2).astype(np.float32)

    # Calculate epsilon as fraction of perimeter
    perimeter = cv2.arcLength(cv_points, True)
    epsilon = epsilon_factor * perimeter

    # Simplify using Douglas-Peucker algorithm
    simplified = cv2.approxPolyDP(cv_points, epsilon, True)

    # Convert back to flat list format
    simplified_flat = simplified.reshape(-1, 2).flatten()

    return simplified_flat.tolist()


def process_label_file(input_file, output_file):
    """Process a single label file to simplify polygons"""

    # Read the input file
    with open(input_file, 'r') as f:
        line = f.readline().strip()

    if not line:
        print(f"Warning: Empty file {input_file}")
        return

    # Parse the line
    parts = line.split()
    class_id = parts[0]
    coords = [float(x) for x in parts[1:]]

    print(f"Original polygon has {len(coords) // 2} points")

    # Simplify the polygon
    simplified_coords = simplify_polygon(coords, epsilon_factor=0.01)

    print(f"Simplified polygon has {len(simplified_coords) // 2} points")

    # Write the simplified version
    with open(output_file, 'w') as f:
        simplified_str = " ".join(f"{coord:.6f}" for coord in simplified_coords)
        f.write(f"{class_id} {simplified_str}\n")